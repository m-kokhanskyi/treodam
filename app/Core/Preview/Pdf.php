<?php


namespace Dam\Core\Preview;


use Espo\Core\Exceptions\Error;
use Gumlet\ImageResize;
use Imagick;

class Pdf extends Image
{

    public function show()
    {
        if ($this->size === "original") {
            $this->size = "xx-large";
        }
        parent::show(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $thumbFilePath
     * @param $filePath
     * @param $size
     * @return mixed
     * @throws Error
     * @throws \Gumlet\ImageResizeException
     * @throws \ImagickException
     */
    protected function createThumb($thumbFilePath, $filePath, $size)
    {
        if (!$this->imageSizes[$size]) {
            throw new Error();
        }

        $pathInfo = pathinfo($thumbFilePath);
        $thumbFilePath = $pathInfo['dirname'] . "/" . $pathInfo['filename'] . ".png";
        list($w, $h) = $this->imageSizes[$size];

//        $image = ImageResize::createFromString($this->buildPreview($filePath));
//
//        $image->crop($w, $h, true, ImageResize::CROPTOP);

        $image = $this->buildPreview($filePath);

        if ($this->getFileManager()->putContents($thumbFilePath, $image->getImageBlob())) {
            return $thumbFilePath;
        }

        return false;
    }

    /**
     * @param $filePath
     * @return string
     * @throws \ImagickException
     */
    protected function buildPreview($filePath)
    {
        $im = new Imagick();
        $im->setResolution(120,120);
        $im->readImage($filePath . "[0]");
        $im->setimageformat("png");
        $im->setImageAlphaChannel(Imagick::ALPHACHANNEL_REMOVE);
        //return $im->getImageBlob();
        return $im;
    }
}